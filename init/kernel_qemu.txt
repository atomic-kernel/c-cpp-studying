# some config:
CONFIG_DEBUG_KERNEL=y
CONFIG_DEBUG_INFO=y
# CONFIG_RANDOMIZE_BASE is not set
# CONFIG_DEBUG_INFO_BTF is not set
# CONFIG_VIRTUALIZATION is not set
# CONFIG_SOUND is not set
VIDEO

# depends LLVM build with llvm version:
apt --no-install-recommends -y install clang-17 lld-17 llvm-17 make bc flex bison python3-minimal libelf-dev libssl-dev libncurses-dev dwarves

# depends LLVM build without llvm version:
apt --no-install-recommends -y install clang lld llvm make bc flex bison python3-minimal libelf-dev libssl-dev libncurses-dev dwarves

# x86_64 LLVM build with llvm version:
make LLVM=1 LLVM_IAS=1 CC=clang-17 LD=ld.lld-17 AR=llvm-ar-17 NM=llvm-nm-17 STRIP=llvm-strip-17 OBJCOPY=llvm-objcopy-17 OBJDUMP=llvm-objdump-17 READELF=llvm-readelf-17 HOSTCC=clang-17 HOSTCXX=clang++-17 HOSTAR=llvm-ar-17 HOSTLD=ld.lld-17 KBUILD_BUILD_TIMESTAMP="2023-10-1" x86_64_defconfig
make LLVM=1 LLVM_IAS=1 CC=clang-17 LD=ld.lld-17 AR=llvm-ar-17 NM=llvm-nm-17 STRIP=llvm-strip-17 OBJCOPY=llvm-objcopy-17 OBJDUMP=llvm-objdump-17 READELF=llvm-readelf-17 HOSTCC=clang-17 HOSTCXX=clang++-17 HOSTAR=llvm-ar-17 HOSTLD=ld.lld-17 KBUILD_BUILD_TIMESTAMP="2023-10-1" menuconfig
make LLVM=1 LLVM_IAS=1 CC=clang-17 LD=ld.lld-17 AR=llvm-ar-17 NM=llvm-nm-17 STRIP=llvm-strip-17 OBJCOPY=llvm-objcopy-17 OBJDUMP=llvm-objdump-17 READELF=llvm-readelf-17 HOSTCC=clang-17 HOSTCXX=clang++-17 HOSTAR=llvm-ar-17 HOSTLD=ld.lld-17 KBUILD_BUILD_TIMESTAMP="2023-10-1" -j$((2*$(nproc))) bzImage

# x86_64 LLVM build without llvm version:
make LLVM=1 LLVM_IAS=1 KBUILD_BUILD_TIMESTAMP="2023-10-1" x86_64_defconfig
make LLVM=1 LLVM_IAS=1 KBUILD_BUILD_TIMESTAMP="2023-10-1" menuconfig
make LLVM=1 LLVM_IAS=1 KBUILD_BUILD_TIMESTAMP="2023-10-1" -j$((2*$(nproc))) bzImage

#arm org gcc
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- multi_v7_defconfig
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -j$((2*$(nproc))) zImage

find . | cpio -o -H newc > ../rootfs.cpio

apt --no-install-recommends install qemu-system-arm ipxe-qemu
qemu-system-aarch64 -machine virt -cpu cortex-a76 -nographic -smp 1 -m 4g -kernel Image -initrd rootfs.cpio -append 'nokslr rdinit=/bin/login -p -f root'
qemu-system-arm -machine virt -cpu cortex-a15 -nographic -smp 16 -m 4g -kernel arch/arm/boot/zImage -initrd rootfs.cpio -append 'nokslr rdinit=/bin/login -p -f root'
apt --no-install-recommends install qemu-system-x86
qemu-system-x86_64 -accel kvm -cpu host -nographic -smp 1 -m 2g -kernel bzImage -drive file=disk.ext4,format=raw -append 'console=ttyS0 root=/dev/sda ro init=/a.out'

# arm llvm
make ARCH=arm LLVM=1 LLVM_IAS=1 CROSS_COMPILE=arm-linux-gnueabihf- -j$((2*$(nproc))) multi_v7_defconfig
make ARCH=arm LLVM=1 LLVM_IAS=1 CROSS_COMPILE=arm-linux-gnueabihf- -j$((2*$(nproc))) menuconfig
make ARCH=arm LLVM=1 LLVM_IAS=1 CROSS_COMPILE=arm-linux-gnueabihf- -j$((2*$(nproc))) zImage

# aarch64 llvm
make ARCH=arm64 LLVM=1 LLVM_IAS=1 CROSS_COMPILE=aarch64-linux-gnu- -j$((2*$(nproc))) defconfig
make ARCH=arm64 LLVM=1 LLVM_IAS=1 CROSS_COMPILE=aarch64-linux-gnu- -j$((2*$(nproc))) menuconfig
make ARCH=arm64 LLVM=1 LLVM_IAS=1 CROSS_COMPILE=aarch64-linux-gnu- -j$((2*$(nproc))) Image

dd if=/dev/zero of=rootfs.ext4 bs=10M count=50
mkfs.ext4 rootfs.ext4
e2fsck -f rootfs.ext4
resize2fs rootfs.ext4 8G

mkdir rootfs
mount rootfs.ext4 rootfs
tar -zxpf /mnt/e/xiazai/ubuntu-base-25.04-beta-base-arm64.tar.gz -C rootfs/
umount rootfs


apt --no-install-recommends -y install bridge-utils iptables
sysctl net.ipv4.ip_forward=1
brctl addbr br0
ip addr add 192.168.101.1/24 brd + dev br0
ip link set br0 up
# 清空防火墙
# iptables -F
iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
#brctl addif br0 eth0
#iptables -I FORWARD -m physdev --physdev-is-bridged -j ACCEPT
#ip tuntap add user 0 mode tap
#ip link set dev tap0 promisc off up
#brctl addif br0 tap0

qemu-system-arm -M virt -cpu cortex-a15 \
qemu-system-aarch64 -M virt -cpu neoverse-v1 \
 -smp "$(nproc)" \
 -m 4g \
 -nographic \
 -kernel Image \
 -append 'nokaslr selinux=0 nospectre_v2 ssbd=force-off mitigations=off root=/dev/vda rw init=/bin/bash' \
 -drive if=none,file=rootfs.ext4,format=raw,id=vda \
 -device virtio-blk-device,drive=vda \
 -net nic,model=virtio -net bridge,br=br0
# -net nic,macaddr="52:54:01:01:01:01",model=virtio -net tap,ifname=tap0,script=no,downscript=no,vhost=on
# -net type=tap,id=net0 -device virtio-net-device,netdev=net0
# -net nic,macaddr="52:54:01:01:01:01",model=virtio -net bridge,br=br0,ifname=br0,script=no,downscript=no,vhost=on

mount -t proc proc /proc
mount -t sysfs sysfs /sys
mkdir -p /dev/pts
mount -t devpts devpts /dev/pts
mount -t tmpfs -o size=500M tmpfs /tmp
export PATH=/usr/local/bin:/usr/bin:/usr/sbin
setsid -c bash

ifconfig lo 127.0.0.1 netmask 255.0.0.0
ifconfig eth0 192.168.101.2/24 netmask 255.255.255.0
route add default gw 192.168.101.1

#dpkg -i *.deb
#ip addr add 127.0.0.1/8 dev lo
#ip link set lo up
#ip addr add 192.168.101.2/24 brd + dev eth0
#ip link set eth0 up
#ip route add default via 192.168.101.1 dev eth0 proto kernel

/usr/sbin/sshd &

ssh -t root@192.168.101.2 /bin/env -i TERM=xterm-256color /bin/login -f root

# x86 uefi
apt --no-install-recommends install qemu-system-gui ovmf

# 编译内核
CONFIG_EFI=y
CONFIG_EFI_STUB=y
CONFIG_CMDLINE="earlycon=efifb console=efifb0"

# 构建disk.img
dd if=/dev/zero of=disk.img bs=10M count=50
parted disk.img
parted disk.imgm klabel gpt
parted disk.img mkpart uefi fat32 2048s 206848s
partx -a -v disk.img
mkfs.fat -F 32 /dev/loop0p1
mount /dev/loop0p1 uefi/
mkdir -p uefi/EFI/Boot/
cp bzImage uefi/EFI/Boot/bootx64.efi
umount uefi
sync

# 启动
qemu-system-x86_64 -accel kvm -cpu host -drive if=pflash,format=raw,readonly=on,file=/usr/share/OVMF/OVMF_CODE_4M.fd -drive if=pflash,format=raw,file=/usr/share/OVMF/OVMF_VARS_4M.fd -smp "$(nproc)" -m 4g -drive file=/root/qemu/disk.img,format=raw

qemu-system-x86_64 -accel kvm -cpu host -nographic -smp 1 -m 2g -kernel bzImage -drive file=disk.ext4,format=raw -append 'console=ttyS0 root=/dev/sda ro init=/a.out'
